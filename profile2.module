<?php
// $Id$

/**
 * @file
 * Support for configurable user profiles.
 */

/**
 * Implements hook_entity_info().
 */
function profile2_entity_info() {
  $return = array(
    'profile2' => array(
      'label' => t('Profile'),
      'entity class' => 'Profile',
      'controller class' => 'EntityAPIController',
      'base table' => 'profile',
      'fieldable' => TRUE,
      'view modes' => array(
        'account' => array(
          'label' => t('User account'),
          'custom settings' => FALSE,
        ),
      ),
      'entity keys' => array(
        'id' => 'pid',
        'bundle' => 'type',
        'label' => 'label',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'uri callback' => 'profile2_uri_callback',
      'access callback' => 'profile2_access',
      'module' => 'profile2',
      'metadata controller class' => 'Profile2MetadataController'
    ),
  );
  $return['profile2_type'] = array(
    'label' => t('Profile type'),
    'entity class' => 'ProfileType',
    'controller class' => 'EntityAPIController',
    'base table' => 'profile_type',
    'fieldable' => FALSE,
    'bundle of' => 'profile2',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'profile2_type_access',
    'module' => 'profile2',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/profiles',
      'file' => 'profile2.admin.inc',
      'controller class' => 'Profile2TypeUIController',
    ),
  );
  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Use this hook to specify profile bundles to avoid a recursion, as loading
 * the profile types needs the entity info too.
 */
function profile2_entity_info_alter(&$entity_info) {
  foreach (profile2_get_types() as $type => $info) {
    $entity_info['profile2']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/profiles/manage/%profile2_type',
        'real path' => 'admin/structure/profiles/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer profiles'),
      ),
    );
  }
}

/**
 * Menu argument loader; Load a profile type by string.
 *
 * @param $type
 *   The machine-readable name of a profile type to load;
 *   having '_' replaced with '-'.
 * @return
 *   A profile type array or FALSE if $type does not exist.
 */
function profile2_type_load($type) {
  return profile2_get_types(strtr($type, array('-' => '_')));
}

/**
 * Implements hook_permission().
 */
function profile2_permission() {
  $permissions = array(
    'administer profile types' =>  array(
      'title' => t('Administer profile types'),
      'description' => t('Create and delete fields on user profiles, and set their permissions.'),
    ),
    'administer profiles' =>  array(
      'title' => t('Administer profiles'),
      'description' => t('Edit and view all user profiles.'),
    ),
  );
  // Generate per profile type permissions.
  foreach (profile2_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit own $type_name profile" => array(
        'title' => t('Edit own %type_name profile', array('%type_name' => $type->label)),
      ),
      "edit any $type_name profile" => array(
        'title' => t('Edit any %type_name profile', array('%type_name' => $type->label)),
      ),
      "view own $type_name profile" => array(
        'title' => t('View own %type_name profile', array('%type_name' => $type->label)),
      ),
      "view any $type_name profile" => array(
        'title' => t('View any %type_name profile', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Gets an array of all profile types, keyed by the type name.
 *
 * @param $type
 *   If set, the type with the given name is returned.
 * @return ProfileType[]
 *   Depending whether $type isset, an array of profile types or a single one.
 */
function profile2_get_types($type = NULL) {
  // @todo: fix fugly variable names.
  $types = entity_load('profile2_type', isset($type) ? array($type) : FALSE);
  if (isset($type)) {
    return isset($types[$type]) ? $types[$type] : FALSE;
  }
  return $types;
}

/**
 * Fetch a profile object.
 *
 * @param $pid
 *   Integer specifying the profile id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $profile object or FALSE if it cannot be loaded.
 *
 * @see profile2_load_multiple()
 */
function profile2_load($pid, $reset = FALSE) {
  $profiles = profile2_load_multiple(array($pid), array(), $reset);
  return reset($profiles);
}

/**
 * Load multiple profiles based on certain conditions.
 *
 * @param $pids
 *   An array of profile IDs.
 * @param $conditions
 *   An array of conditions to match against the {profile} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of profile objects, indexed by pid.
 *
 * @see entity_load()
 * @see profile2_load()
 * @see profile2_load_by_user()
 */
function profile2_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('profile2', $pids, $conditions, $reset);
}

/**
 * Fetch profiles by account.
 *
 * @param $account
 *   The user account to load profiles for, or its uid.
 * @param $type_name
 *   To load a single profile, pass the type name of the profile to load.
 * @return
 *   Either a single profile or an array of profiles keyed by profile type.
 *
 * @see profile2_load_multiple()
 */
function profile2_load_by_user($account, $type_name = NULL) {
  // Use a separate query to determine all profile ids per user and cache them.
  // That way we can look up profiles by id and benefit from the static cache
  // of the entity loader.
  $cache = drupal_static(__FUNCTION__, array());
  $uid = is_object($account) ? $account->uid : $account;

  if (!isset($cache[$uid])) {
    if (empty($type_name)) {
      $profiles = profile2_load_multiple(FALSE, array('uid' => $uid));
      // Cache ids for further lookups.
      $cache[$uid] = array();
      foreach ($profiles as $pid => $profile) {
        $cache[$uid][$profile->type] = $pid;
      }
      return $profiles ? array_combine(array_keys($cache[$uid]), $profiles) : array();
    }
    $cache[$uid] = db_select('profile', 'p')
      ->fields('p', array('type', 'pid'))
      ->condition('uid', $uid)
      ->execute()
      ->fetchAllKeyed();
  }
  if (isset($type_name)) {
    return isset($cache[$uid][$type_name]) ? profile2_load($cache[$uid][$type_name]) : FALSE;
  }
  // Return an array containing profiles keyed by profile type.
  return $cache[$uid] ? array_combine(array_keys($cache[$uid]), profile2_load_multiple($cache[$uid])) : $cache[$uid];
}

/**
 * Deletes a profile.
 */
function profile2_delete(Profile $profile) {
  $profile->delete();
}

/**
 * Delete multiple profiles.
 *
 * @param $pids
 *   An array of profile IDs.
 */
function profile2_delete_multiple(array $pids) {
  entity_get_controller('profile2')->delete($pids);
}

/**
 * Implements hook_user_cancel().
 */
function profile2_user_cancel(&$edit, $account, $method) {
  // Delete all profiles of the user in any case.
  foreach (profile2_load_by_user($account) as $profile) {
    profile2_delete($profile);
  }
}

/**
 * Create a new profile object.
 */
function profile_create(array $values) {
  return new Profile($values);
}

/**
 * Saves a profile to the database.
 *
 * @param $profile
 *   The profile object.
 */
function profile2_save(Profile $profile) {
  return $profile->save();
}

/**
 * Saves a profile type to the db.
 */
function profile2_type_save(ProfileType $type) {
  $type->save();
}

/**
 * Deletes a profile type from.
 */
function profile2_type_delete(ProfileType $type) {
  $type->delete();
}

/**
 * Implements hook_profile2_load()
 */
function profile2_profile2_load($profiles) {
  $types = profile2_get_types();
  // Load the profile's label.
  foreach ($profiles as $profile) {
    if (isset($types[$profile->type])) {
      $profile->label = $types[$profile->type]->label;
    }
  }
}

/**
 * Implements hook_profile2_type_delete()
 */
function profile2_profile2_type_delete($type) {
  // Delete all profiles of this type.
  $pids = array_keys(profile2_load_multiple(FALSE, array('type' => $type->type)));
  profile2_delete_multiple($pids);
}

/**
 * Implements hook_user_view().
 */
function profile2_user_view($account) {
  foreach (profile2_get_types() as $type => $profile_type) {
    if ($profile_type->userView && ($profile = profile2_load_by_user($account, $type))) {
      $account->content['profile_' . $type] = array(
        '#type' => 'user_profile_category',
        '#title' => $profile->label,
        '#prefix' => '<a id="profile-' . $profile->type . '"></a>',
      );
      $account->content['profile_' . $type]['view'] = $profile->view('account');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the user edit form.
 *
 * @see profile2_form_validate_handler
 * @see profile2_form_submit_handler
 */
function profile2_form_user_profile_form_alter(&$form, &$form_state) {
  if (($type = profile2_get_types($form['#user_category'])) && $type->userCategory) {
    if (empty($form_state['profiles'])) {
      $profile = profile2_load_by_user($form['#user'], $form['#user_category']);
      if (empty($profile)) {
        $profile = profile_create(array('type' => $form['#user_category'], 'uid' => $form['#user']->uid));
      }
      $form_state['profiles'][$profile->type] = $profile;
    }
    profile2_attach_form($form, $form_state);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the registration form.
 */
function profile2_form_user_register_form_alter(&$form, &$form_state) {
  $type = variable_get('profile2_register', 'main');
  if ($type && ($profile_type = profile2_get_types($type))) {
    if (empty($form_state['profiles'])) {
      $form_state['profiles'][$type] = profile_create(array('type' => $type));
    }
    profile2_attach_form($form, $form_state);
  }
}

/**
 * Attaches the profile forms of the profiles set in
 * $form_state['profiles'].
 *
 * @see profile2_form_validate_handler()
 * @see profile2_form_submit_handler()
 */
function profile2_attach_form(&$form, &$form_state) {
  foreach ($form_state['profiles'] as $type => $profile) {
    $form['profile_' . $profile->type] = array();
    field_attach_form('profile2', $profile, $form['profile_' . $profile->type], $form_state);
  }
  $form['#validate'][] = 'profile2_form_validate_handler';
  // Extract the form values and clean them up first. This is needed as some
  // submit callbacks like user_register_submit() rely on clean form values.
  $form['#submit'][] = 'profile2_form_submit_handler';
}

/**
 * Validation handler for the profile form.
 *
 * @see profile2_attach_form()
 */
function profile2_form_validate_handler(&$form, &$form_state) {
  foreach ($form_state['profiles'] as $type => $profile) {
    field_attach_form_validate('profile2', $profile, $form, $form_state);
  }
}

/**
 * Submit handler that builds and saves all profiles in the form.
 *
 * @see profile2_attach_form()
 */
function profile2_form_submit_handler(&$form, &$form_state) {
  profile2_form_submit_build_profile($form, $form_state);
  profile2_form_submit_cleanup($form, $form_state);

  foreach ($form_state['profiles'] as $type => $profile) {
    // During registration set the uid field of the newly created user.
    if (empty($profile->uid) && isset($form_state['user']->uid)) {
      $profile->uid = $form_state['user']->uid;
    }
    profile2_save($profile);
  }
}

/**
 * Submit builder. Extracts the form values and updates the entities.
 *
 * @see profile2_attach_form()
 */
function profile2_form_submit_build_profile(&$form, &$form_state) {
  foreach ($form_state['profiles'] as $type => $profile) {
    entity_form_submit_build_entity('profile2', $profile, $form, $form_state);
  }
}

/**
 * Cleans up the form values as the user modules relies on clean values.
 *
 * @see profile2_attach_form()
 */
function profile2_form_submit_cleanup(&$form, &$form_state) {
  foreach ($form_state['field'] as $field_name => $info) {
    unset($form_state['values'][$field_name]);
  }
}

/**
 * Implements hook_user_categories().
 */
function profile2_user_categories() {
  $data = array();
  foreach (profile2_get_types() as $type => $info) {
    if ($info->userCategory) {
      $data[] = array(
        'name' => $type,
        'title' => $info->label,
        // Add an offset so a weight of 0 appears right of the account category.
        'weight' => $info->weight + 3,
        'access callback' => 'profile2_category_access',
        'access arguments' => array(1, $type)
      );
    }
  }
  return $data;
}

/**
 * Menu item access callback - check if a user has access to a profile category.
 */
function profile2_category_access($account, $type_name) {
  // As there might be no profile yet, create a new object for being able to run
  // a proper access check.
  $profile = profile_create(array('type' => $type_name, 'uid' => $account->uid));
  return ($account->uid > 0 && profile2_access('edit', $profile));
}

/**
 * Determines whether the given user has access to a profile.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $profile
 *   Optionally a profile or a profile type o check access for. If nothing is
 *   given, access for all profiles is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function profile2_access($op, $profile = NULL, $account = NULL) {
  if (user_access('administer profiles', $account)) {
    return TRUE;
  }
  if (isset($profile) && $type_name = $profile->type) {
    if ($op == 'delete') {
      return FALSE;
    }
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name profile", $account)) {
      return TRUE;
    }
    $account = isset($account) ? $account : $GLOBALS['user'];
    if (isset($profile->uid) && $profile->uid == $account->uid && user_access("$op own $type_name profile", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback for the entity API.
 */
function profile2_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer profile types', $account);
}

/**
 * Implements hook_theme().
 */
function profile2_theme() {
  return array(
    'profile2_admin_type' => array(
      'variables' => array('label' => NULL, 'type' => NULL),
    ),
    'profile2' => array(
      'render element' => 'elements',
      'template' => 'profile2',
    ),
  );
}

/**
 * The class used for profile entities.
 */
class Profile extends EntityDB {

  public function __construct($values = array()) {
    if (isset($values['user'])) {
      $this->setUser($values['user']);
      unset($values['user']);
    }
    parent::__construct($values, 'profile2');
  }

  /**
   * Returns the user owning this profile.
   */
  public function user() {
    return user_load($this->uid);
  }

  /**
   * Sets a new user owning this profile.
   */
  public function setUser($account) {
    $this->uid = $account->uid;
  }


  /**
   * Gets the associated profile type object.
   *
   * @return ProfileType
   */
  public function getType() {
    return profile2_get_types($this->type);
  }

  /**
   * Returns the URI for this profile. May be altered via hook_entity_info().
   */
  public function uri() {
    return entity_uri('profile2', $this);
  }

  /**
   * Returns the full url() for the profile.
   */
  public function url() {
    $uri = $this->uri();
    return url($uri['path'], $uri);
  }

  /**
   * Returns the drupal path to this profile.
   */
  public function path() {
    $uri = $this->uri();
    return $uri['path'];
  }

  public function buildContent($view_mode = 'full', $langcode = NULL) {
    $content = array();
    // Assume newly create objects are still empty.
    if (!empty($this->is_new)) {
      $content['empty']['#markup'] = '<em class="profile2-no-data">' . t('There is no profile data yet.') . '</em>';
    }
    return entity_get_controller($this->entityType)->buildContent($this, $view_mode, $langcode, $content);
  }
}

/**
 * Default uri callback.
 *
 * @see Profile::uri()
 */
function profile2_uri_callback($profile) {
  return array(
    'path' => 'user/' . $profile->uid,
    'options' => array('fragment' => 'profile-' . $profile->type),
  );
}


/**
 * Use a separate class for profile types so we can specify some defaults
 * modules may alter.
 */
class ProfileType extends EntityDB {

  /**
   * Whether the profile type appears in the user categories.
   */
  public $userCategory = TRUE;

  /**
   * Whether the profile is displayed on the user account page.
   */
  public $userView = TRUE;


  public $type;
  public $label;
  public $weight = 0;

  public function __construct($values = array()) {
    parent::__construct($values, 'profile2_type');
  }

  /**
   * Returns whether the profile type is locked, thus may not be deleted or renamed.
   *
   * Profile types provided in code are automatically treated as locked, as well
   * as any fixed profile type.
   */
  public function isLocked() {
    return isset($this->status) && empty($this->is_new) && (($this->status & ENTITY_IN_CODE) || ($this->status & ENTITY_FIXED));
  }
}

/**
 * Implements hook_default_profile2_type().
 */
function profile2_default_profile2_type() {
  $types['main'] = new ProfileType(array(
    'type' => 'main',
    'label' => t('Profile'),
    'weight' => 0,
  ));
  return $types;
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Adds a checkbox for controlling field view access to fields added to
 * profiles.
 */
function profile2_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['instance']['entity_type']['#value'] == 'profile2') {
    $form['field']['settings']['profile2_private'] = array(
      '#type' => 'checkbox',
      '#title' => t('Make the content of this field private.'),
      '#default_value' => !empty($form['#field']['settings']['profile2_private']),
      '#description' => t('If checked, the content of this field is only shown to the profile owner and administrators.'),
    );
  }
  else {
    // Add the value to the form so it isn't lost.
    $form['field']['settings']['profile2_private'] = array(
      '#type' => 'value',
      '#value' => !empty($form['#field']['settings']['profile2_private']),
    );
  }
}

/**
 * Implements hook_field_access().
 */
function profile2_field_access($op, $field, $entity_type, $profile = NULL, $account = NULL) {
  if ($entity_type == 'profile2' && $op == 'view' && !user_access('administer profiles', $account)) {
    // For profiles, deny general view access.
    if (!isset($profile)) {
      return FALSE;
    }
    // Also deny view access, if someone else views a private field.
    $account = isset($account) ? $account : $GLOBALS['user'];
    if ($account->uid != $profile->uid && !empty($field['settings']['profile2_private'])) {
      return FALSE;
    }
  }
}

/**
 * Entity metadata callback to load profiles for the given user account.
 */
function profile2_user_get_properties($account, array $options, $name) {
  // Remove the leading 'profile_' from the property name to get the type name.
  $profile = profile2_load_by_user($account, substr($name, 8));
  return $profile ? $profile : NULL;
}

