<?php
// $Id$

/**
 * @file
 * Support for configurable user profiles.
 */

/**
 * Implements hook_entity_info().
 */
function profile2_entity_info() {
  $return = array(
    'profile' => array(
      'label' => t('Profile'),
      'entity class' => 'Profile',
      'controller class' => 'EntityAPIController',
      'base table' => 'profile',
      'fieldable' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Full profile'),
        ),
      ),
      'entity keys' => array(
        'id' => 'pid',
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
    ),
  );
  $return['profile_type'] = array(
    'label' => t('Profile type'),
    'entity class' => 'ProfileType',
    'controller class' => 'EntityAPIController',
    'base table' => 'profile_type',
    'fieldable' => FALSE,
    'bundle of' => 'profile',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'type' => 'type',
    ),
  );
  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Use this hook to specify profile bundles to avoid a recursion, as loading
 * the profile types needs the entity info too.
 */
function profile2_entity_info_alter(&$entity_info) {
  foreach (profile2_get_types() as $type => $info) {
    $entity_info['profile']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/profiles/manage/%profile_type',
        'real path' => 'admin/structure/profiles/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer profiles'),
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function profile2_menu() {
  // Profile types admin UI
  $items['admin/structure/profiles'] = array(
    'title' => 'Profile types',
    'description' => 'Manage profiles, including fields, permissions, visibility.',
    'page callback' => 'profile2_overview_types',
    'access arguments' => array('administer profiles'),
    'file' => 'profile2.admin.inc',
  );
  $items['admin/structure/profiles/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/profiles/add'] = array(
    'title' => 'Add a profile type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile2_type_form'),
    'access arguments' => array('administer profiles'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'profile2.admin.inc',
  );
  // Individual profile types admin UI
  $items['admin/structure/profiles/manage/%profile_type'] = array(
    'title' => 'Edit profile type',
    'title callback' => 'profile2_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile2_type_form', 4),
    'access arguments' => array('administer profiles'),
    'file' => 'profile2.admin.inc',
  );
  $items['admin/structure/profiles/manage/%profile_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  /*
  //TODO
  $items['admin/structure/profiles/manage/%profile_type/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('node_type_delete_confirm', 4),
    'access arguments' => array('administer content types'),
    'type' => MENU_CALLBACK,
    'file' => 'content_types.inc',
  );
  */
  return $items;
}

/**
 * Menu argument loader; Load a profile type by string.
 *
 * @param $type
 *   The machine-readable name of a profile type to load;
 *   having '_' replaced with '-'.
 * @return
 *   A profile type array or FALSE if $type does not exist.
 */
function profile_type_load($type) {
  return profile2_get_types(strtr($type, array('-' => '_')));
}

/**
 * Menu title callback.
 */
function profile2_type_page_title($profile_type) {
  return $profile_type->type;
}

/**
 * Implements hook_permission().
 */
function profile2_permission() {
  $permissions = array(
    'administer profile types' =>  array(
      'title' => t('Administer profile types'),
      'description' => t('Create and delete fields on user profiles, and set their permissions.'),
    ),
    'administer profiles' =>  array(
      'title' => t('Administer profiles'),
      'description' => t('Edit and view all user profiles.'),
    ),
  );

  // Generate standard node permissions for all applicable node types.
  foreach (profile2_get_types() as $type) {
    $permissions += profile2_list_permissions($type);
  }

  return $permissions;
}

function profile2_list_permissions($profile_type) {
  $type_name = check_plain($profile_type->type);

  // Build standard list of node permissions for this type.
  $perms = array(
    "edit own $type_name profile" => array(
      'title' => t('Edit own %type_name profile', array('%type_name' => $profile_type->label)),
    ),
    "edit any $type_name profile" => array(
      'title' => t('Edit any %type_name profile', array('%type_name' => $profile_type->label)),
    ),
    "view own $type_name profile" => array(
      'title' => t('View own %type_name profile', array('%type_name' => $profile_type->label)),
    ),
    "view any $type_name profile" => array(
      'title' => t('View any %type_name profile', array('%type_name' => $profile_type->label)),
    ),
  );

  return $perms;
}

/**
 * Gets an array of all profile types, keyed by the type name.
 *
 * @param $type
 *   If set, the type with the given name is returned.
 * @return ProfileType[]
 *   Depending whether $type isset, an array of profile types or a single one.
 */
function profile2_get_types($type = NULL) {
  // @todo: fix fugly variable names.
  $types = entity_load('profile_type', isset($type) ? array($type) : FALSE);
  if (isset($type)) {
    return isset($types[$type]) ? $types[$type] : FALSE;
  }
  return $types;
}

/**
 * Fetch a profile object.
 *
 * @param $pid
 *   Integer specifying the profile id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $profile object or FALSE if it cannot be loaded.
 *
 * @see profile2_load_multiple()
 */
function profile2_load($pid, $reset = FALSE) {
  $profiles = profile2_load_multiple(array($pid), array(), $reset);
  return reset($profiles);
}

/**
 * Load multiple profiles based on certain conditions.
 *
 * @param $pids
 *   An array of profile IDs.
 * @param $conditions
 *   An array of conditions to match against the {profile} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of profile objects, indexed by pid.
 *
 * @see entity_load()
 * @see profile2_load()
 * @see profile2_load_by_user()
 */
function profile2_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('profile', $pids, $conditions, $reset);
}

/**
 * Fetch profiles by account.
 *
 * @param $account
 *   The user account to load profiles for, or its uid.
 * @param $type
 *   To load a single profile, pass the type of the profile to load.
 * @return
 *   Either a single profile or an array of profiles keyed by profile type.
 *
 * @see profile2_load_multiple()
 */
function profile2_load_by_user($account, $type = NULL) {
  // Use a separate query to determine all profile ids per user and cache them.
  // That way we can look up profiles by id and benefit from the static cache
  // of the entity loader.
  $cache = drupal_static(__FUNCTION__, array());
  $uid = is_object($account) ? $account->uid : $account;

  if (!isset($cache[$uid])) {
    if (empty($type)) {
      $profiles = profile2_load_multiple(array(), array('uid' => $uid));
      // Cache ids for further lookups.
      $cache[$uid] = array();
      foreach ($profiles as $pid => $profile) {
        $cache[$uid][$profile->type] = $pid;
      }
      return array_combine(array_keys($cache[$uid]), $profiles);
    }
    $cache[$uid] = db_select('profile', 'p')
      ->fields('p', array('type', 'pid'))
      ->condition('uid', $uid)
      ->execute()
      ->fetchAllKeyed();
  }
  if (isset($type)) {
    return isset($cache[$uid][$type]) ? profile2_load($cache[$uid][$type]) : FALSE;
  }
  // Return an array containing profiles keyed by profile type.
  return $cache[$uid] ? array_combine(array_keys($cache[$uid]), profile2_load_multiple($cache[$uid])) : $cache[$uid];
}

/**
 * Deletes a profile.
 */
function profile2_delete(Profile $profile) {
  $profile->delete();
}

/**
 * Delete multiple profiles.
 *
 * @param $pids
 *   An array of profile IDs.
 */
function profile2_delete_multiple(array $pids) {
  entity_get_controller('profile')->delete($pids);
}

/**
 * Implements hook_user_cancel().
 */
function profile2_user_cancel(&$edit, $account, $method) {
  // Delete all profiles of the user in any case.
  foreach (profile2_load_by_user($account) as $profile) {
    profile2_delete($profile);
  }
}

/**
 * Create a new profile object.
 */
function profile_create(array $values) {
  return new Profile($values);
}

/**
 * Saves a profile to the database.
 *
 * @param $profile
 *   The profile object.
 */
function profile2_save(Profile $profile) {
  return $profile->save();
}

/**
 * Saves a profile type to the db.
 */
function profile2_type_save(ProfileType $type) {
  $type->save();
}

/**
 * Implements hook_profile_type_presave().
 */
function profile2_profile_type_presave($type) {
  $data = get_object_vars($type);
  unset($data['type'], $data['label'], $data['weight'], $data['locked'], $data['data'], $data['userCategory'], $data['userView'], $data['status']);
  $type->data = $data;
}

/**
 * Deletes a profile type from.
 */
function profile2_type_delete(ProfileType $type) {
  $type->delete();
}

/**
 * Implements hook_profile_load()
 */
function profile2_profile_load($profiles) {
  $types = profile2_get_types();
  // Load the profile's label.
  foreach ($profiles as $profile) {
    if (isset($types[$profile->type])) {
      $profile->label = $types[$profile->type]->label;
    }
  }
}

/**
 * Implements hook_profile_type_delete()
 */
function profile2_profile_type_delete($type) {
  // Delete all profiles of this type.
  $pids = array_keys(profile2_load_multiple(FALSE, array('type' => $type->type)));
  profile2_delete_multiple($pids);
}

/**
 * Implements hook_user_view().
 */
function profile2_user_view($account) {
  foreach (profile2_get_types() as $type => $profile_type) {
    if ($profile_type->userView && ($profile = profile2_load_by_user($account, $type))) {
      $account->content['profile_' . $type] = array(
        '#type' => 'user_profile_category',
        '#title' => $profile->label,
      );
      $account->content['profile_' . $type] += field_attach_view('profile', $profile);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the user edit form.
 *
 * @see profile2_form_validate_handler
 * @see profile2_form_submit_handler
 */
function profile2_form_user_profile_form_alter(&$form, &$form_state) {
  if (($type = profile2_get_types($form['#user_category'])) && $type->userCategory) {
    if (empty($form_state['profiles'])) {
      $profile = profile2_load_by_user($form['#user'], $form['#user_category']);
      if (empty($profile)) {
        $profile = profile_create(array('type' => $form['#user_category'], 'uid' => $form['#user']->uid));
      }
      $form_state['profiles'][$profile->type] = $profile;
    }
    profile2_attach_form($form, $form_state);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the registration form.
 */
function profile2_form_user_register_form_alter(&$form, &$form_state) {
  $type = variable_get('profile2_register', 'main');
  if ($type && ($profile_type = profile2_get_types($type))) {
    if (empty($form_state['profiles'])) {
      $form_state['profiles'][$type] = profile_create(array('type' => $type));
    }
    profile2_attach_form($form, $form_state);
  }
}

/**
 * Attaches the profile forms of the profiles set in
 * $form_state['profiles'].
 *
 * @see profile2_form_validate_handler()
 * @see profile2_form_submit_handler()
 */
function profile2_attach_form(&$form, &$form_state) {
  if (empty($form['#builder_function'])) {
    // TODO: Remove this once it's optional in core.
    $form['#builder_function'] = 'profile2_form_submit_builder';
  }
  foreach ($form_state['profiles'] as $type => $profile) {
    $form['profile_' . $profile->type] = array();
    field_attach_form('profile', $profile, $form['profile_' . $profile->type], $form_state);
  }
  $form['#validate'][] = 'profile2_form_validate_handler';
  // Extract the form values and clean them up first. This is needed as some
  // submit callbacks like user_register_submit() rely on clean form values.
  $form['#submit'] = array_merge(
    array('profile2_form_submit_builder', 'profile2_form_submit_cleanup'),
    $form['#submit'],
    array('profile2_form_submit_handler')
  );
}

/**
 * @see profile2_attach_form()
 */
function profile2_form_validate_handler(&$form, &$form_state) {
  foreach ($form_state['profiles'] as $type => $profile) {
    field_attach_form_validate('profile', $profile, $form, $form_state);
  }
}

/**
 * Submit builder. Extracts the form values and updates the entities. Afterwards
 * our form values are removed.
 *
 * This also serves as callback for non-js add-more submits, thus it enables
 * rebuilding.
 *
 * @see profile2_attach_form()
 */
function profile2_form_submit_builder(&$form, &$form_state) {
  foreach ($form_state['profiles'] as $type => $profile) {
    field_attach_submit('profile', $profile, $form, $form_state);
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Cleans up the form values.
 *
 * @see profile2_attach_form()
 */
function profile2_form_submit_cleanup(&$form, &$form_state) {
  foreach ($form_state['field'] as $field_name => $info) {
    unset($form_state['values'][$field_name]);
  }
}

/**
 * Finally save all profiles.
 *
 * @see profile2_attach_form()
 */
function profile2_form_submit_handler(&$form, &$form_state) {
  foreach ($form_state['profiles'] as $type => $profile) {
    // During registration set the uid field of the newly created user.
    if (empty($profile->uid) && isset($form_state['user']->uid)) {
      $profile->uid = $form_state['user']->uid;
    }
    profile2_save($profile);
  }
  unset($form_state['rebuild']);
}

/**
 * Implements hook_user_categories().
 */
function profile2_user_categories() {
  $data = array();
  foreach (profile2_get_types() as $type => $info) {
    if ($info->userCategory) {
      $data[] = array(
        'name' => $type,
        'title' => $info->label,
        // Add an offset so a weight of 0 appears right of the account category.
        'weight' => $info->weight + 3,
        'access callback' => 'profile2_category_access',
        'access arguments' => array(1, $type)
      );
    }
  }
  return $data;
}

/**
 * Menu item access callback - check if a user has access to a profile category.
 */
function profile2_category_access($account, $profile_type) {
  if (user_access('administer profiles') && $account->uid > 0) {
    return TRUE;
  }
  else {
    //TODO: Should we add a more sophisticated access handling invoking
    // hook_profile2_access ?
    return $GLOBALS['user']->uid == $account->uid;
  }
}

/**
 * Implements hook_theme().
 */
function profile2_theme() {
  return array(
    'profile2_admin_type' => array(
      'variables' => array('label' => NULL, 'type' => NULL),
    ),
  );
}

/**
 * The class used for profile entities.
 */
class Profile extends EntityDBExtendable {

  public function __construct($values = array()) {
    parent::__construct($values, 'profile');
  }
}

/**
 * Use a separate class for profile types so we can specify some defaults
 * modules may alter.
 */
class ProfileType extends EntityDBExtendable {

  /**
   * Whether the profile type appears in the user categories.
   */
  public $userCategory = TRUE;

  /**
   * Whether the profile is displayed on the user account page.
   */
  public $userView = TRUE;


  public function __construct($values = array()) {
    parent::__construct($values, 'profile_type');
  }
}

/**
 * Implements hook_default_profile_type().
 */
function profile2_default_profile_type() {
  $types['main'] = new ProfileType(array(
      'type' => 'main',
      'label' => t('Profile'),
      'weight' => 0,
      'locked' => FALSE,
  ));
  return $types;
}
